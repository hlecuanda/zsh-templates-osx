					

					#################################################
					#################################################
					#                                               #
					#          $ZDOT/environment.local              #
					#                                               #
					#################################################
					#################################################



# File environment.local
# Add system-specific environment and path variables to this file


###################################################################
###################################################################
####   System maintenance prompts to check if up to date.    ######
###################################################################
###################################################################

# Check to see if locate_database exists, and if it is younger that two weeks old.   
# If not, prompt user to run the periodic maintenance scripts. These get run
# automatically if your computer is on at 3 am. Otherwise, you have to do it somehow:

if [[  $(uname) == Darwin &&  $( id -Gn ) == *admin* ]];then
	if [[ /var/db/locate.database == $( ls /var/db/locate.database(.mw-2) ) ]];then
		:  # Do nothing, database is younger than two weeks old
	else 
		print ""
		if [[ ! -f /var/db/locate.database ]];then
			print "\e[1m  No locate.database found"
			print ""
		else
			print "\e[1m  System maintenance scripts haven't been run for two weeks."
			print ""
		fi
		print ""
		print "  Please run the system periodic maintenance scripts as soon as possible."
		print ""
		print -n "  Shall I do this for you? \e[0m [y/N] "
		print ""

		user_task_yes=( sudo periodic monthly daily weekly  )
		user_task_no=(   )

		timeout=15 # second until default answer takes effect

		        answer=""
		        read -t $timeout -A answer

		        if [[ $answer[1] == (y|Y) ]]; then
					print ""
					print "Issuing \e[1m sudo periodic monthly daily weekly \e[0m now"
		            $user_task_yes
					print ""
		            answer=""
		        else
		            $user_task_no
					print ""
					print "Issue \e[1m sudo periodic monthly daily weekly \e[0m at your convenience"
					print ""
		            answer=""
		        fi
	fi
fi


###################################################################
###################################################################
####   First stuff for all sessions (even non-interactive)   ######
###################################################################
###################################################################
    
    #    For CVS:
    	export CVS_RSH=ssh

	# If you have a configuration file in /usr/local/bin
	  if [[ -f /usr/local/bin/init.sh ]];then
			source /usr/local/bin/init.sh
	  fi
		
	# This is specific for crystallographers:
	  if [[ -f /usr/local/xtal/bin/init.sh ]];then
			source /usr/local/xtal/bin/init.sh
	  fi
	
	# 	Use this construct to APPEND to current PATH:

	    if [[ -d /example/path/bin ]]; then
	        PATH=$PATH:/example/path/bin
	    fi
	
	#  Use this construct to APPEND to current FPATH:
 
	    if [[ -d /Path/To/another/location/functions ]]; then
	      FPATH=$FPATH:/Path/To/another/location/functions
	    fi
	
	# Avoid repeats in the path
	    export PATH FPATH

	    typeset -U path fpath	
	
###################################################################
	
	
	

###################################################################
###################################################################
####       Now stuff for only the interactive sessions       ######
###################################################################
###################################################################	
	
if [[ -o interactive ]]; then
	
	
	#######################################################
	####  Make the "open -a" completion work faster  ######
	#######################################################

	# This is to make the "open -a" command completion snappier.
	# touching the file upon shell startup will trigger various launchd items
	# that in turn will ensure completions are up to date.  We run the command once 
	# now to establish a short-term SpotLight cache.

		if [[ -f /Library/LaunchAgents/zsh.refresh.completion.plist  || \
			  -f /Library/LaunchAgents/zsh.refresh.completion.plist  ]];then
						touch ~/.zsh/zrefresh 2>/dev/null
						chmod 777 ~/.zsh/zrefresh  2>/dev/null
		fi
	
		# This seems to work better:
	
		if [[ -x /usr/bin/mdfind ]];then
			( mdfind -onlyin /Applications -onlyin /Developer \
			"kMDItemContentType == 'com.apple.application-*'" >| \
			/dev/null 2>&1 & ; );
		fi
	
	#######################################################
	
	
	

	###################################################################
	####        Login shell messages                             ######
	###################################################################

	    #  This works for both Terminal.app and iTerm.app as well as X-term
	    #  set the title and tab values to current directory
	    #  Stuff that appears when the interactive shell starts up:

     
	        # Give time since last reboot.  Blank print statement gives us a new line
        
	        uptime=$(uptime 2>/dev/null ) 
	        print "\e[36mTime: $uptime \e[0m"
         
	        # Tell us what computer we are on and what directory we are in
        
	        print "\e[36m$HOST\e[0m\:\:\e[36m$PWD\e[0m" 
         
        
	        # What version of zsh are we running?
         
	        print "\e[36mInitializing zsh version number $ZSH_VERSION \e[0m"
    
    
	###################################################################
	####         More housecleaning                              ######
	###################################################################     
	       
        # avoid repeats in the paths
         
        	typeset -U path manpath fpath
        
         
        # Don't kill background jobs upon logging out
         
        	setopt nohup
        
        # Share history between terminal sessions
        # Useful for multi-terminal environment
    
        	setopt share_history
    
	###################################################################
	####         Local zstyles                                   ######
	###################################################################


	    zmodload -i zsh/complist  2>/dev/null
    
	    # Gives menu of possible completions highlighted with reverse
	    # video and navigable via arrow keys when confronted with four
	    # or more possible completions
	    zstyle ':completion:*' menu select=10

	    # Make one-way case insensitivity (for cd and cdd commands) for (Directory) completion
	    #   zstyle ':completion:*:*:*:*' matcher-list 'm:{a-z}={A-Z}' 
	    #   zstyle ':completion:*:*:cd:*' matcher-list 'm:{a-z}={A-Z}' 

	    # For open completion 
	    zstyle ':completion:*:*:open:*' matcher 'm:{a-z}={A-Z} r: ||[^ ]=**' 
    
	    # If you want a Pashua GUI menu of completion options as a default 
	    # for the "open -a Foo.app" command, then set the variable OPEN_PASHUA
	    # to 'yes' by removing the comment sign from the following line:
    
	    # export OPEN_PASHUA='yes'
      
    
	    # If you have more than a page-full of options, this lets you see one
	    # page of them at a time  
	    zstyle ':completion:*' list-prompt '%S -- more -- %s' 
    
	    # This groups sets of completions for alternatives (#globally | for the mdfind command)
	    # zstyle ':completion:*' group-name ''  
	    zstyle ':completion:*:*:_mdfind:*' group-name '' 
    
 
    
	###################################################################
	####  Local Darin-specific environment configuration         ######
	###################################################################  

    
  
		  if [[ $(uname) == Darwin ]];then 
  
			    export localfink=$SWPREFIX/fink/dists/local/main/finkinfo
			    export unstablefink=$SWPREFIX/fink/dists/unstable/main/finkinfo
			    export stablefink=$SWPREFIX/fink/dists/stable/main/finkinfo
			    export oldfink=$SWPREFIX/fink/10.2-gcc3.3/unstable/main/finkinfo 
    
			    export desktop='~/Desktop'
			    export Desktop='~/Desktop'
			    export public_html='~/public_html'
		     
    
			    #  Crystallography stuff moved to the file environment.xtal
    
			    #  If $USE_XTAL is set, then read the file(s).
    
			    # USE_XTAL='YES'
    
			    if [[  $USE_XTAL == "YES" || -f ~/.zsh/use_xtal_env ]];then
    
			        if [[ -f $ZDOT/environment.xtal/00master.env.xtal.zsh ]];then
			            source $ZDOT/environment.xtal/00master.env.xtal.zsh
			        elif [[ -f $ZDOT_TEMPLATE/environment.xtal/00master.env.xtal.zsh ]];then
			            source $ZDOT_TEMPLATE/environment.xtal/00master.env.xtal.zsh
			        fi
        
			        if [[ -f $ZDOT_USER/environment.xtal/00master.env.xtal.zsh  ]];then
			            source $ZDOT_USER/environment.xtal/00master.env.xtal.zsh 
					elif [[ -f $ZDOT_USER/environment.xtal  ]];then
					    source $ZDOT_USER/environment.xtal
			        fi
        
			    fi
       
    
			    #############################################################################
			    #
			    #  $hosts variable for host completion with ssh and related programs:
			    #
			    #############################################################################

				#=========================================
				# host and user names completions settings
				#=========================================

					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					# Checks if host_user_completion_settings is in ~/.zsh/cache/
					# If not, create one with default settings.
					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

					if [[ ! -f ~/.zsh/cache/host_user_completion_settings ]]; then
						command mkdir -p ~/.zsh/cache/
						command cp $ZDOT/local-functions/darwin/host_user_completion_settings ~/.zsh/cache/.
					fi


					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					# Source host_user_completion_settings
					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

					source ~/.zsh/cache/host_user_completion_settings


					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					# Create custom_hosts and custom_users in ~/.zsh/cache/
					# Issue a warning message if they are empty and if
					# USE_CUSTOM_USERS and USE_CUSTOM_HOSTS variables are
					# set to 'yes'.
					#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

					command touch ~/.zsh/cache/custom_hosts
					command touch ~/.zsh/cache/custom_users

					if [[ -z $( < ~/.zsh/cache/custom_hosts ) && $USE_CUSTOM_HOSTS == 'yes' ]]; then

						if [[ $ENCODING == '1:14' ]]; then
							print ""
							print "\e[1m  custom_hostsファイルが空です. host_setupコマンドを実行してください.\e[0m"
							print ""
						else
							print ""
							print "\e[1m  custom_hosts file is empty.  Please execute host_setup.\e[0m"
							print ""
						fi

					fi

					if [[ -z $( < ~/.zsh/cache/custom_users ) && $USE_CUSTOM_USERS == 'yes' ]]; then

						if [[ $ENCODING == '1:14' ]]; then
							print ""
							print "\e[1m  custom_usersファイルが空です. user_setupコマンドを実行してください.\e[0m"
							print ""
						else
							print ""
							print "\e[1m  custom_users file is empty.  Please execute user_setup.\e[0m"
							print ""
						fi

					fi


					#~~~~~~~~~~~~~~~~~~~~~~
					# host completion setup
					#~~~~~~~~~~~~~~~~~~~~~~

						#------------------------------------------------
						# Define a list of hosts for host name completion
						#------------------------------------------------

						if [[ $USE_SSH_KNOWN_HOSTS == 'yes' && -f ~/.ssh/known_hosts ]]; then

							ssh_hosts=(

							#----------------------------------------------
							# This gets known hosts from ~/.ssh/known_hosts
							#----------------------------------------------

						#	$( < ~/.ssh/known_hosts | command cut -f 1 -d " " | command cut -f 1 -d , )
							
							
							$( < ~/.ssh/known_hosts | command cut -f 1 -d " " | command cut -f 1 -d , | command cut -f 1  -d ":" | sed -e 's/\[//g' -e 's/]//g' )

							)

							HOSTS+=( $ssh_hosts )

						fi


						if [[ $USE_CUSTOM_HOSTS == 'yes' && -f ~/.zsh/cache/custom_hosts ]]; then

							custom_hosts=(

							#----------------------------------
							# This gets hosts from custom_hosts
							#----------------------------------

							$( < ~/.zsh/cache/custom_hosts )

							)

							HOSTS+=( $custom_hosts )

						fi


						if [[ $USE_ETC_HOSTS == 'yes' ]]; then

							etc_hosts=(

							#--------------------------------
							# This gets hosts from /etc/hosts
							#--------------------------------

							${$( < /etc/hosts | command cut -d : -f 1,7 | command grep -v "#" )//:*/}

							)

							HOSTS+=( $etc_hosts )

						fi


						#-----------------------
						# get rid of the repeats
						#-----------------------

						typeset -U HOSTS
						zstyle -e ':completion:*' hosts 'reply=($HOSTS)'



					#~~~~~~~~~~~~~~~~~~~~~~
					# user completion setup
					#~~~~~~~~~~~~~~~~~~~~~~

						#------------------------------------------------
						# Define a list of users for user name completion
						#------------------------------------------------

						if [[ $USE_ETC_USERS == 'yes' ]]; then

							zmodload -i zsh/parameter
							etc_users=( $userdirs[(I)*] )

							USERS+=( $etc_users )

						fi

						if [[ $USE_CUSTOM_USERS == 'yes' && -f ~/.zsh/cache/custom_users ]]; then

							custom_users=(

							$( < ~/.zsh/cache/custom_users )

							)

							USERS+=( $custom_users )

						fi


						#-----------------------
						# get rid of the repeats
						#-----------------------

						typeset -U USERS
						zstyle -e ':completion:*' users 'reply=($USERS)'

	 
    
			    #############################################################################
			    #
			    #  Local Java CLASSPATH variables:
			    #
			    #############################################################################
    
			    # Gary Kerbaugh's Java stuff   
			    # {====>}
			    JAVA_CMD=/usr/bin/java

			    JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home 
			    export JAVA_HOME
    
			    CLASSPATH=$CLASSPATH:/System/Library/Frameworks/JavaVM.framework/Home:/System/Library/Frameworks/JavaVM.framework/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Classes/ui.jar:.
    
			    export  CLASSPATH
    
			    # JBOSS_CLASSPATH=/Developer/jboss/bin
			    # JIKESPATH=.:/System/Library/Frameworks/JavaVM.framework/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Classes/ui.jar:/Developer/jakarta-tomcat-4.0.3/common/lib/servlet.jar:/Developer/jakarta-tomcat-4.0.3/common/lib/xerces.jar:/Library/Java/Extensions/activation.jar:/Library/Java/Extensions/jdbc2_0-stdext.jar:/Library/Java/Extensions/pgjdbc2.jar:/System/Library/Frameworks/JavaVM.framework/Home/lib/dt.jar:/System/Library/Frameworks/JavaVM.framework/Home/lib/ext/jnet.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.3.1/Home/lib/ext/jpda.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.3.1/Home/lib/ext/jsse.jar
    
			    # export JIKESPATH  
			    # *************************************************************************
    
			 fi # [[ $(uname) == Darwin ]]
			
				###################################################################
				####       End of the Darwin only part         ######
				###################################################################

fi  #  [[ -o interactive ]]

	###################################################################
	###################################################################
	####       End of the interactive sessions only part         ######
	###################################################################
 	###################################################################
 
