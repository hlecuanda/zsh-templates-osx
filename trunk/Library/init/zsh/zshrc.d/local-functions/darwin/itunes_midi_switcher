#!/bin/zsh -f

# itunes_midi_switcher
# Gets the sampling frequency from the currently playing track, checks with audio midi to see if the freqency matches
# and if it doesn't, it quits iTunes, changes the Audio MIDI Setup settings, and then re-opens iTunes to restart the same
# track in the same playlist.

version="0.0.1"


###############################################################################
 
#  Created by William Scott on 2010-09-15.
#  Copyright (c) 2010. All rights reserved.


#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
#    USA
#    
#    cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html
#
###############################################################################

# To do:

#  1.  Make sure correct pane of Audio MIDI Setup is activated.  Quiting and 
#      restarting is a kludge.

#  2.  Test and exit script if (a) iTunes is not open, and (b) if iTunes is 
#      not currently playing a track.

#  3.  Replace conditional tests at end with a for or do/while loop.

#  4.  Need automatic activation when play button is depressed.

#  5.  Maybe add cache mechanism for storing array of allowed Audio MIDI sampling
#      frequencies and cache for current value of Audio MIDI sampling frequency.  
#      Is there a unix way of discovering the current MIDI sampling frequency?

###############################################################################

function GetMidiFreq {
osascript <<-eof1
tell application  "Audio MIDI Setup" to quit
 
tell application "Audio MIDI Setup"
	activate
end tell
--- need code to open window first

tell application "System Events" to tell application process "Audio MIDI Setup"
	set frequencyValue to value of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
end tell
return frequencyValue
eof1
}

function HideMidi {
osascript <<-eof2
	tell application "System Events"
		set visible of process "Audio MIDI Setup" to false
	end tell
eof2
}

function GetTrackFreq {
    osascript <<< 'tell application "iTunes" to  get sample rate of current track'
}

function MIDIprobeBottom {
osascript <<-eof3
tell application "Audio MIDI Setup" to activate
tell application "System Events" to tell application process "Audio MIDI Setup"
	click button 1 of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
	key code 126 using option down  -- go to lowest frequency
	key code 36
	--get value of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
end tell
eof3
		
}

function MIDIprobeTop {
osascript <<-eof31
tell application "Audio MIDI Setup" to activate
tell application "System Events" to tell application process "Audio MIDI Setup"
	click button 1 of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
	key code 125 using option down -- go to highest frequency
	key code 36
	--get value of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
end tell
eof31
		
}

function MIDIincreaseFreq {
osascript <<-eof4
tell application "Audio MIDI Setup" to activate
tell application "System Events" to tell application process "Audio MIDI Setup"
click button 1 of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
key code 125 -- go to next higher frequency
key code 36
-- get value of combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
end tell
eof4

}

function GetFreqArray {
osascript <<-eof6
	tell application "Audio MIDI Setup" to activate
	tell application "System Events" to tell application process "Audio MIDI Setup"
		set comboBox to combo box 1 of group 1 of tab group 1 of group 1 of window "Audio Devices"
		set frequencyValue to value of comboBox -- get current value
		click button 1 of comboBox -- perform action "AXPress" to drop the list
		set theChoices to value of text fields of list 1 of scroll area 1 of comboBox -- get all the values
		key code 36
	end tell	
	return theChoices
eof6
}

function GetPlaylistID { osascript <<< 'tell application "iTunes" to get persistent ID of current playlist' }

function GetTrackID { osascript <<< 'tell application "iTunes" to get persistent ID of current track' }

function PausePlay { osascript <<< 'tell application "iTunes" to pause' }

function QuitItunes { osascript <<< 'tell application "iTunes" to quit' }

function RestartPlay {
osascript <<-eof5	
tell application "iTunes" to quit
delay 5
tell application "iTunes" to activate
tell application "iTunes"
	set thePlaylist to some playlist whose persistent ID is "$PlayListID"
	play (some track of thePlaylist whose persistent ID is "$TrackID")
end tell
eof5
}

###################################################################################################

# Main

# Poll Audio MIDI Setup for the current setting
CurrentMidiValueArray=($(GetMidiFreq))
HideMidi
CurrentMidiValue=$CurrentMidiValueArray[1]

# Poll iTunes for the current track sampling frequency
CurrentTrackFreq=$(GetTrackFreq)


# Check for a match. Fix and restart if they do not match.

if (( $CurrentMidiValue ==  $CurrentTrackFreq )); then
    true  
    # Do nothing if the two values match
	# print They are the same

else
   
    # Fix the mismatch


    # We need to find out what track is playing and what playlist it is from
    # in order to restart iTunes at the beginning of that track after
    # the Audio MIDI Setup sampling frequency is reset.

	TrackID=$(GetTrackID) 
	PlayListID=$(GetPlaylistID)
	
		# print Audio Midi is set to $CurrentMidiValue
		# print iTunes current track sample frequency is $CurrentTrackFreq

    # Now we need to discover what the allowed values for Audio MIDI sampling
    # frequency are, put them in a usable form by removing Hz and commas, and 
    # then count the number of elements in the array.

	RawFreqArray=($( GetFreqArray))
	FreqArray=($RawFreqArray:gs/Hz//:gs/,// )
	NumElements="$#FreqArray"

	# Find the integer index of the sampling frequency that matches that of the
	# currently playing iTunes track by looping over all elements of the array.
	
	for (( i = 1; i < $NumElements + 1; i++ )); do
	        if (( $FreqArray[i] == $(GetTrackFreq) )) ; then
				FreqIndex=$i
				# print $FreqIndex
			fi
	done

    
    # Match the frequency. This should be implemented properly with a for loop but this works for now.
    PausePlay

    # Set the Audio MIDI sampling frequency to the lowest possible value, and then crank it up one
    # increment at a time until we match the iTunes Track sampling frequency.

	MIDIprobeBottom
		if [[ $FreqIndex == 1 ]]; then
			true
			# MIDIprobeBottom has already set Audio MIDI to 
			# the lowest available frequency
		elif [[ $FreqIndex == 2 ]]; then
			MIDIincreaseFreq
		elif [[ $FreqIndex == 3 ]]; then
			MIDIincreaseFreq
			MIDIincreaseFreq
		elif [[ $FreqIndex == 4 ]]; then
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
		elif [[ $FreqIndex == 5 ]]; then
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
		elif [[ $FreqIndex == 6 ]]; then
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
		elif [[ $FreqIndex == 7 ]]; then
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
			MIDIincreaseFreq
		else
			MIDIprobeTop
			# If no match exits, let iTunes upsample to highest available sampling frequency
			# This is a very stupid solution.
		fi
		
		RestartPlay
fi




